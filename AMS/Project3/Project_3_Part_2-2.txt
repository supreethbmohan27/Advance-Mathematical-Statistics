import pandas as pd
import folium
from sklearn.cluster import KMeans

def cluster_and_plot(data):
    # Perform K-means clustering
    kmeans = KMeans(n_clusters=6, random_state=0)
    kmeans.fit(data[['latitude', 'longitude']])

    # Add cluster labels to the DataFrame
    data['cluster_label'] = kmeans.labels_

    # Initialize Folium map
    map_clusters = folium.Map(location=[data['latitude'].mean(), data['longitude'].mean()], zoom_start=4)

    # Set color scheme for the clusters
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow']

    # Add markers to the map
    for lat, lon, cluster_label in zip(data['latitude'], data['longitude'], data['cluster_label']):
        folium.CircleMarker(
            [lat, lon],
            radius=5,
            color=colors[cluster_label],
            fill=True,
            fill_color=colors[cluster_label],
            fill_opacity=0.7).add_to(map_clusters)

    # Save the map with a filename based on the number of clusters
    map_clusters.save(f'clusters_map.html')

    # Group the data by cluster, state, age, manner of death, and gender, and count occurrences
    correlation_data = data.groupby(['cluster_label', 'state', 'age', 'manner_of_death', 'gender']).size().reset_index(name='count')

    # Sort the data by count in descending order
    correlation_data.sort_values(by='count', ascending=False, inplace=True)

    # Display the correlations for each cluster
    for cluster in range(6):
        cluster_data = correlation_data[correlation_data['cluster_label'] == cluster]
        print(f"\nCluster {cluster+1} (Color: {colors[cluster]}):")
        print("\n{:<10} {:<20} {:<20} {:<20} {:<10}".format('State', 'Age', 'Manner of Death', 'Gender', 'Count'))
        for state in cluster_data['state'].unique():
            state_cluster_data = cluster_data[cluster_data['state'] == state]
            age_range = f"{state_cluster_data['age'].min()} - {state_cluster_data['age'].max()}"
            genders = state_cluster_data['gender'].unique()
            gender_str = " & ".join(genders) if len(genders) > 1 else genders[0]
            print("{:<10} {:<20} {:<20} {:<20} {:<10}".format(state, age_range, state_cluster_data.iloc[0]['manner_of_death'], gender_str, state_cluster_data['count'].sum()))

# Load data from CSV file into a DataFrame
data = pd.read_csv('fatal-police-shootings-data-continental_US.csv')

# Check for missing values and handle them if necessary
data.dropna(inplace=True)  # Drop rows with missing values, if needed

# Perform clustering and plotting
cluster_and_plot(data)
