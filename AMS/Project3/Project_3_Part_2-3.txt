import pandas as pd
import folium
from sklearn.cluster import KMeans
import warnings

# Suppress warnings
warnings.filterwarnings('ignore')

# Load data from CSV file into a DataFrame
data = pd.read_csv('fatal-police-shootings-data-continental_US.csv')

# Convert date column to datetime type
data['date'] = pd.to_datetime(data['date'], errors='coerce')

# Drop rows with missing or invalid dates
data.dropna(subset=['date'], inplace=True)

# Extract year from the date
data['year'] = data['date'].dt.year

# Group data by year and state, count the occurrences, and reset index
year_state_counts = data.groupby(['year', 'state']).size().reset_index(name='count')

# Find the top five states for each year
top_states_by_year = year_state_counts.groupby('year').apply(lambda x: x.nlargest(5, 'count')).reset_index(drop=True)

# Initialize an empty dictionary to store the top cities for each state and year
top_cities_by_year = {}

# Iterate over each row of the top states DataFrame
for index, row in top_states_by_year.iterrows():
    state_data = data[(data['state'] == row['state']) & (data['year'] == row['year'])]
    top_cities_by_year.setdefault(row['year'], []).append((row['state'], state_data))

# Perform clustering and generate maps for each year
def generate_maps():
    for year, state_data_list in top_cities_by_year.items():
        # Initialize Folium map centered on the United States
        map = folium.Map(location=[37.0902, -95.7129], zoom_start=4)

        # Perform K-means clustering for each state's data
        for state, state_data in state_data_list:
            # Drop rows with NaN values
            state_data.dropna(subset=['latitude', 'longitude'], inplace=True)

            # Check if there are any remaining rows after dropping NaN values
            if not state_data.empty:
                # Select relevant features for clustering
                coordinates = state_data[['latitude', 'longitude']]

                # Convert coordinates to a numpy array
                coordinates_array = coordinates.values

                # Perform K-means clustering
                kmeans = KMeans(n_clusters=5, random_state=0)
                kmeans.fit(coordinates_array)

                # Get cluster centers
                cluster_centers = kmeans.cluster_centers_

                # Get cluster labels for each data point
                labels = kmeans.labels_

                # Add cluster labels to the DataFrame
                state_data['cluster_label'] = labels

                # Define colors for markers
                colors = ['red', 'blue', 'green', 'orange', 'purple']

                # Add markers for each cluster
                for cluster_label, cluster_center in enumerate(cluster_centers):
                    cluster_points = state_data[state_data['cluster_label'] == cluster_label]
                    for _, row in cluster_points.iterrows():
                        folium.CircleMarker(
                            location=[row['latitude'], row['longitude']],
                            radius=5,
                            color=colors[cluster_label],
                            fill=True,
                            fill_color=colors[cluster_label],
                            fill_opacity=0.7
                        ).add_to(map)

        # Save the map as an HTML file with the year
        map.save(f'clusters_map_{year}.html')

        # Print states and cities for each year
        print(f"States and cities according to year {year}:")
        for state_data in state_data_list:
            state = state_data[0]
            cities = state_data[1]['city'].unique()[:3]  # Select top 3 cities
            print(f"{state} ({year}): {', '.join(cities)}")

# Generate maps for each year and print states and cities
generate_maps()
