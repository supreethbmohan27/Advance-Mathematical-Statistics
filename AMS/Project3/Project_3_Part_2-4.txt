import pandas as pd
import folium
from sklearn.cluster import KMeans

# Load data from CSV file into a DataFrame
data = pd.read_csv('fatal-police-shootings-data-continental_US.csv')

# Convert date column to datetime type
data['date'] = pd.to_datetime(data['date'], errors='coerce')

# Drop rows with missing or invalid dates
data.dropna(subset=['date'], inplace=True)

# Extract year from the date
data['year'] = data['date'].dt.year

# Group data by state and city, count the occurrences, and reset index
state_city_counts = data.groupby(['state', 'city']).size().reset_index(name='count')

# Find the top five cities overall
top_cities = state_city_counts.nlargest(5, 'count')

# Perform K-means clustering
kmeans = KMeans(n_clusters=1, random_state=0)

# Initialize Folium map centered on the United States
map = folium.Map(location=[37.0902, -95.7129], zoom_start=4)

# Perform K-means clustering for the top cities
for index, row in top_cities.iterrows():
    city_data = data[(data['state'] == row['state']) & (data['city'] == row['city'])]
    city_data.dropna(subset=['latitude', 'longitude'], inplace=True)  # Drop rows with missing latitude or longitude
    coordinates = city_data[['latitude', 'longitude']]
    if not coordinates.empty:
        kmeans.fit(coordinates)
        cluster_center = kmeans.cluster_centers_[0]

        # Create a string with city and its incidents
        city_info = f"<b>{row['city']}, {row['state']}</b><br>{row['count']} incidents"

        # Add custom HTML to display city and its incidents as labels next to marker
        html = f'<div style="font-family: Arial; font-size: 12px">{city_info}</div>'
        folium.Marker(
            location=cluster_center,
            icon=folium.DivIcon(html=html)
        ).add_to(map)

        print(f"Processing {row['city']}, {row['state']} - {row['count']} incidents")

        # Add marker for each city
        for _, city_row in city_data.iterrows():
            folium.Marker(
                location=[city_row['latitude'], city_row['longitude']],
                popup=city_row['city'],
                icon=folium.Icon(color='red', icon='info-sign')
            ).add_to(map)

# Save the map as an HTML file
map.save('clusters_map_overall.html')
